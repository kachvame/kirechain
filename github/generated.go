// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package github

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/Khan/genqlient/graphql"
)

// CommitNode includes the GraphQL fields of Commit requested by the fragment CommitNode.
// The GraphQL type's documentation follows.
//
// Represents a Git commit.
type CommitNode struct {
	// Authorship details of the commit.
	Author CommitNodeAuthorGitActor `json:"author"`
	// The Git commit message
	Message string `json:"message"`
}

// GetAuthor returns CommitNode.Author, and is useful for accessing the field via an interface.
func (v *CommitNode) GetAuthor() CommitNodeAuthorGitActor { return v.Author }

// GetMessage returns CommitNode.Message, and is useful for accessing the field via an interface.
func (v *CommitNode) GetMessage() string { return v.Message }

// CommitNodeAuthorGitActor includes the requested fields of the GraphQL type GitActor.
// The GraphQL type's documentation follows.
//
// Represents an actor in a Git commit (ie. an author or committer).
type CommitNodeAuthorGitActor struct {
	// The name in the Git commit.
	Name string `json:"name"`
	// The email in the Git commit.
	Email string `json:"email"`
}

// GetName returns CommitNodeAuthorGitActor.Name, and is useful for accessing the field via an interface.
func (v *CommitNodeAuthorGitActor) GetName() string { return v.Name }

// GetEmail returns CommitNodeAuthorGitActor.Email, and is useful for accessing the field via an interface.
func (v *CommitNodeAuthorGitActor) GetEmail() string { return v.Email }

// GetCommitsInPRRepository includes the requested fields of the GraphQL type Repository.
// The GraphQL type's documentation follows.
//
// A repository contains the content for a project.
type GetCommitsInPRRepository struct {
	// Returns a single pull request from the current repository by number.
	PullRequest GetCommitsInPRRepositoryPullRequest `json:"pullRequest"`
}

// GetPullRequest returns GetCommitsInPRRepository.PullRequest, and is useful for accessing the field via an interface.
func (v *GetCommitsInPRRepository) GetPullRequest() GetCommitsInPRRepositoryPullRequest {
	return v.PullRequest
}

// GetCommitsInPRRepositoryPullRequest includes the requested fields of the GraphQL type PullRequest.
// The GraphQL type's documentation follows.
//
// A repository pull request.
type GetCommitsInPRRepositoryPullRequest struct {
	// A list of commits present in this pull request's head branch not present in the base branch.
	Commits GetCommitsInPRRepositoryPullRequestCommitsPullRequestCommitConnection `json:"commits"`
}

// GetCommits returns GetCommitsInPRRepositoryPullRequest.Commits, and is useful for accessing the field via an interface.
func (v *GetCommitsInPRRepositoryPullRequest) GetCommits() GetCommitsInPRRepositoryPullRequestCommitsPullRequestCommitConnection {
	return v.Commits
}

// GetCommitsInPRRepositoryPullRequestCommitsPullRequestCommitConnection includes the requested fields of the GraphQL type PullRequestCommitConnection.
// The GraphQL type's documentation follows.
//
// The connection type for PullRequestCommit.
type GetCommitsInPRRepositoryPullRequestCommitsPullRequestCommitConnection struct {
	// A list of nodes.
	Nodes []GetCommitsInPRRepositoryPullRequestCommitsPullRequestCommitConnectionNodesPullRequestCommit `json:"nodes"`
	// Information to aid in pagination.
	PageInfo GetCommitsInPRRepositoryPullRequestCommitsPullRequestCommitConnectionPageInfo `json:"pageInfo"`
}

// GetNodes returns GetCommitsInPRRepositoryPullRequestCommitsPullRequestCommitConnection.Nodes, and is useful for accessing the field via an interface.
func (v *GetCommitsInPRRepositoryPullRequestCommitsPullRequestCommitConnection) GetNodes() []GetCommitsInPRRepositoryPullRequestCommitsPullRequestCommitConnectionNodesPullRequestCommit {
	return v.Nodes
}

// GetPageInfo returns GetCommitsInPRRepositoryPullRequestCommitsPullRequestCommitConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *GetCommitsInPRRepositoryPullRequestCommitsPullRequestCommitConnection) GetPageInfo() GetCommitsInPRRepositoryPullRequestCommitsPullRequestCommitConnectionPageInfo {
	return v.PageInfo
}

// GetCommitsInPRRepositoryPullRequestCommitsPullRequestCommitConnectionNodesPullRequestCommit includes the requested fields of the GraphQL type PullRequestCommit.
// The GraphQL type's documentation follows.
//
// Represents a Git commit part of a pull request.
type GetCommitsInPRRepositoryPullRequestCommitsPullRequestCommitConnectionNodesPullRequestCommit struct {
	// The Git commit object
	Commit GetCommitsInPRRepositoryPullRequestCommitsPullRequestCommitConnectionNodesPullRequestCommitCommit `json:"commit"`
}

// GetCommit returns GetCommitsInPRRepositoryPullRequestCommitsPullRequestCommitConnectionNodesPullRequestCommit.Commit, and is useful for accessing the field via an interface.
func (v *GetCommitsInPRRepositoryPullRequestCommitsPullRequestCommitConnectionNodesPullRequestCommit) GetCommit() GetCommitsInPRRepositoryPullRequestCommitsPullRequestCommitConnectionNodesPullRequestCommitCommit {
	return v.Commit
}

// GetCommitsInPRRepositoryPullRequestCommitsPullRequestCommitConnectionNodesPullRequestCommitCommit includes the requested fields of the GraphQL type Commit.
// The GraphQL type's documentation follows.
//
// Represents a Git commit.
type GetCommitsInPRRepositoryPullRequestCommitsPullRequestCommitConnectionNodesPullRequestCommitCommit struct {
	CommitNode `json:"-"`
}

// GetAuthor returns GetCommitsInPRRepositoryPullRequestCommitsPullRequestCommitConnectionNodesPullRequestCommitCommit.Author, and is useful for accessing the field via an interface.
func (v *GetCommitsInPRRepositoryPullRequestCommitsPullRequestCommitConnectionNodesPullRequestCommitCommit) GetAuthor() CommitNodeAuthorGitActor {
	return v.CommitNode.Author
}

// GetMessage returns GetCommitsInPRRepositoryPullRequestCommitsPullRequestCommitConnectionNodesPullRequestCommitCommit.Message, and is useful for accessing the field via an interface.
func (v *GetCommitsInPRRepositoryPullRequestCommitsPullRequestCommitConnectionNodesPullRequestCommitCommit) GetMessage() string {
	return v.CommitNode.Message
}

func (v *GetCommitsInPRRepositoryPullRequestCommitsPullRequestCommitConnectionNodesPullRequestCommitCommit) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetCommitsInPRRepositoryPullRequestCommitsPullRequestCommitConnectionNodesPullRequestCommitCommit
		graphql.NoUnmarshalJSON
	}
	firstPass.GetCommitsInPRRepositoryPullRequestCommitsPullRequestCommitConnectionNodesPullRequestCommitCommit = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.CommitNode)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetCommitsInPRRepositoryPullRequestCommitsPullRequestCommitConnectionNodesPullRequestCommitCommit struct {
	Author CommitNodeAuthorGitActor `json:"author"`

	Message string `json:"message"`
}

func (v *GetCommitsInPRRepositoryPullRequestCommitsPullRequestCommitConnectionNodesPullRequestCommitCommit) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetCommitsInPRRepositoryPullRequestCommitsPullRequestCommitConnectionNodesPullRequestCommitCommit) __premarshalJSON() (*__premarshalGetCommitsInPRRepositoryPullRequestCommitsPullRequestCommitConnectionNodesPullRequestCommitCommit, error) {
	var retval __premarshalGetCommitsInPRRepositoryPullRequestCommitsPullRequestCommitConnectionNodesPullRequestCommitCommit

	retval.Author = v.CommitNode.Author
	retval.Message = v.CommitNode.Message
	return &retval, nil
}

// GetCommitsInPRRepositoryPullRequestCommitsPullRequestCommitConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection.
type GetCommitsInPRRepositoryPullRequestCommitsPullRequestCommitConnectionPageInfo struct {
	// When paginating forwards, the cursor to continue.
	EndCursor string `json:"endCursor"`
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
}

// GetEndCursor returns GetCommitsInPRRepositoryPullRequestCommitsPullRequestCommitConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *GetCommitsInPRRepositoryPullRequestCommitsPullRequestCommitConnectionPageInfo) GetEndCursor() string {
	return v.EndCursor
}

// GetHasNextPage returns GetCommitsInPRRepositoryPullRequestCommitsPullRequestCommitConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *GetCommitsInPRRepositoryPullRequestCommitsPullRequestCommitConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// GetCommitsInPRResponse is returned by GetCommitsInPR on success.
type GetCommitsInPRResponse struct {
	// Lookup a given repository by the owner and repository name.
	Repository GetCommitsInPRRepository `json:"repository"`
}

// GetRepository returns GetCommitsInPRResponse.Repository, and is useful for accessing the field via an interface.
func (v *GetCommitsInPRResponse) GetRepository() GetCommitsInPRRepository { return v.Repository }

// GetCommitsOfBranchByAuthorRepository includes the requested fields of the GraphQL type Repository.
// The GraphQL type's documentation follows.
//
// A repository contains the content for a project.
type GetCommitsOfBranchByAuthorRepository struct {
	// Fetch a given ref from the repository
	Ref GetCommitsOfBranchByAuthorRepositoryRef `json:"ref"`
}

// GetRef returns GetCommitsOfBranchByAuthorRepository.Ref, and is useful for accessing the field via an interface.
func (v *GetCommitsOfBranchByAuthorRepository) GetRef() GetCommitsOfBranchByAuthorRepositoryRef {
	return v.Ref
}

// GetCommitsOfBranchByAuthorRepositoryRef includes the requested fields of the GraphQL type Ref.
// The GraphQL type's documentation follows.
//
// Represents a Git reference.
type GetCommitsOfBranchByAuthorRepositoryRef struct {
	// The object the ref points to. Returns null when object does not exist.
	Target History `json:"-"`
}

// GetTarget returns GetCommitsOfBranchByAuthorRepositoryRef.Target, and is useful for accessing the field via an interface.
func (v *GetCommitsOfBranchByAuthorRepositoryRef) GetTarget() History { return v.Target }

func (v *GetCommitsOfBranchByAuthorRepositoryRef) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetCommitsOfBranchByAuthorRepositoryRef
		Target json.RawMessage `json:"target"`
		graphql.NoUnmarshalJSON
	}
	firstPass.GetCommitsOfBranchByAuthorRepositoryRef = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Target
		src := firstPass.Target
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalHistory(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal GetCommitsOfBranchByAuthorRepositoryRef.Target: %w", err)
			}
		}
	}
	return nil
}

type __premarshalGetCommitsOfBranchByAuthorRepositoryRef struct {
	Target json.RawMessage `json:"target"`
}

func (v *GetCommitsOfBranchByAuthorRepositoryRef) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetCommitsOfBranchByAuthorRepositoryRef) __premarshalJSON() (*__premarshalGetCommitsOfBranchByAuthorRepositoryRef, error) {
	var retval __premarshalGetCommitsOfBranchByAuthorRepositoryRef

	{

		dst := &retval.Target
		src := v.Target
		var err error
		*dst, err = __marshalHistory(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal GetCommitsOfBranchByAuthorRepositoryRef.Target: %w", err)
		}
	}
	return &retval, nil
}

// GetCommitsOfBranchByAuthorResponse is returned by GetCommitsOfBranchByAuthor on success.
type GetCommitsOfBranchByAuthorResponse struct {
	// Lookup a given repository by the owner and repository name.
	Repository GetCommitsOfBranchByAuthorRepository `json:"repository"`
}

// GetRepository returns GetCommitsOfBranchByAuthorResponse.Repository, and is useful for accessing the field via an interface.
func (v *GetCommitsOfBranchByAuthorResponse) GetRepository() GetCommitsOfBranchByAuthorRepository {
	return v.Repository
}

// GetPRsRepository includes the requested fields of the GraphQL type Repository.
// The GraphQL type's documentation follows.
//
// A repository contains the content for a project.
type GetPRsRepository struct {
	// A list of pull requests that have been opened in the repository.
	PullRequests GetPRsRepositoryPullRequestsPullRequestConnection `json:"pullRequests"`
}

// GetPullRequests returns GetPRsRepository.PullRequests, and is useful for accessing the field via an interface.
func (v *GetPRsRepository) GetPullRequests() GetPRsRepositoryPullRequestsPullRequestConnection {
	return v.PullRequests
}

// GetPRsRepositoryPullRequestsPullRequestConnection includes the requested fields of the GraphQL type PullRequestConnection.
// The GraphQL type's documentation follows.
//
// The connection type for PullRequest.
type GetPRsRepositoryPullRequestsPullRequestConnection struct {
	// A list of nodes.
	Nodes []GetPRsRepositoryPullRequestsPullRequestConnectionNodesPullRequest `json:"nodes"`
	// Information to aid in pagination.
	PageInfo GetPRsRepositoryPullRequestsPullRequestConnectionPageInfo `json:"pageInfo"`
}

// GetNodes returns GetPRsRepositoryPullRequestsPullRequestConnection.Nodes, and is useful for accessing the field via an interface.
func (v *GetPRsRepositoryPullRequestsPullRequestConnection) GetNodes() []GetPRsRepositoryPullRequestsPullRequestConnectionNodesPullRequest {
	return v.Nodes
}

// GetPageInfo returns GetPRsRepositoryPullRequestsPullRequestConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *GetPRsRepositoryPullRequestsPullRequestConnection) GetPageInfo() GetPRsRepositoryPullRequestsPullRequestConnectionPageInfo {
	return v.PageInfo
}

// GetPRsRepositoryPullRequestsPullRequestConnectionNodesPullRequest includes the requested fields of the GraphQL type PullRequest.
// The GraphQL type's documentation follows.
//
// A repository pull request.
type GetPRsRepositoryPullRequestsPullRequestConnectionNodesPullRequest struct {
	// Identifies the pull request number.
	Number int `json:"number"`
}

// GetNumber returns GetPRsRepositoryPullRequestsPullRequestConnectionNodesPullRequest.Number, and is useful for accessing the field via an interface.
func (v *GetPRsRepositoryPullRequestsPullRequestConnectionNodesPullRequest) GetNumber() int {
	return v.Number
}

// GetPRsRepositoryPullRequestsPullRequestConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection.
type GetPRsRepositoryPullRequestsPullRequestConnectionPageInfo struct {
	// When paginating forwards, the cursor to continue.
	EndCursor string `json:"endCursor"`
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
}

// GetEndCursor returns GetPRsRepositoryPullRequestsPullRequestConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *GetPRsRepositoryPullRequestsPullRequestConnectionPageInfo) GetEndCursor() string {
	return v.EndCursor
}

// GetHasNextPage returns GetPRsRepositoryPullRequestsPullRequestConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *GetPRsRepositoryPullRequestsPullRequestConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// GetPRsResponse is returned by GetPRs on success.
type GetPRsResponse struct {
	// Lookup a given repository by the owner and repository name.
	Repository GetPRsRepository `json:"repository"`
}

// GetRepository returns GetPRsResponse.Repository, and is useful for accessing the field via an interface.
func (v *GetPRsResponse) GetRepository() GetPRsRepository { return v.Repository }

// GetRepositoriesOrganization includes the requested fields of the GraphQL type Organization.
// The GraphQL type's documentation follows.
//
// An account on GitHub, with one or more owners, that has repositories, members and teams.
type GetRepositoriesOrganization struct {
	// A list of repositories that the user owns.
	Repositories GetRepositoriesOrganizationRepositoriesRepositoryConnection `json:"repositories"`
}

// GetRepositories returns GetRepositoriesOrganization.Repositories, and is useful for accessing the field via an interface.
func (v *GetRepositoriesOrganization) GetRepositories() GetRepositoriesOrganizationRepositoriesRepositoryConnection {
	return v.Repositories
}

// GetRepositoriesOrganizationRepositoriesRepositoryConnection includes the requested fields of the GraphQL type RepositoryConnection.
// The GraphQL type's documentation follows.
//
// A list of repositories owned by the subject.
type GetRepositoriesOrganizationRepositoriesRepositoryConnection struct {
	// A list of nodes.
	Nodes []GetRepositoriesOrganizationRepositoriesRepositoryConnectionNodesRepository `json:"nodes"`
	// Information to aid in pagination.
	PageInfo GetRepositoriesOrganizationRepositoriesRepositoryConnectionPageInfo `json:"pageInfo"`
}

// GetNodes returns GetRepositoriesOrganizationRepositoriesRepositoryConnection.Nodes, and is useful for accessing the field via an interface.
func (v *GetRepositoriesOrganizationRepositoriesRepositoryConnection) GetNodes() []GetRepositoriesOrganizationRepositoriesRepositoryConnectionNodesRepository {
	return v.Nodes
}

// GetPageInfo returns GetRepositoriesOrganizationRepositoriesRepositoryConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *GetRepositoriesOrganizationRepositoriesRepositoryConnection) GetPageInfo() GetRepositoriesOrganizationRepositoriesRepositoryConnectionPageInfo {
	return v.PageInfo
}

// GetRepositoriesOrganizationRepositoriesRepositoryConnectionNodesRepository includes the requested fields of the GraphQL type Repository.
// The GraphQL type's documentation follows.
//
// A repository contains the content for a project.
type GetRepositoriesOrganizationRepositoriesRepositoryConnectionNodesRepository struct {
	RepositoryNode `json:"-"`
}

// GetId returns GetRepositoriesOrganizationRepositoriesRepositoryConnectionNodesRepository.Id, and is useful for accessing the field via an interface.
func (v *GetRepositoriesOrganizationRepositoriesRepositoryConnectionNodesRepository) GetId() string {
	return v.RepositoryNode.Id
}

// GetName returns GetRepositoriesOrganizationRepositoriesRepositoryConnectionNodesRepository.Name, and is useful for accessing the field via an interface.
func (v *GetRepositoriesOrganizationRepositoriesRepositoryConnectionNodesRepository) GetName() string {
	return v.RepositoryNode.Name
}

func (v *GetRepositoriesOrganizationRepositoriesRepositoryConnectionNodesRepository) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetRepositoriesOrganizationRepositoriesRepositoryConnectionNodesRepository
		graphql.NoUnmarshalJSON
	}
	firstPass.GetRepositoriesOrganizationRepositoriesRepositoryConnectionNodesRepository = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RepositoryNode)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetRepositoriesOrganizationRepositoriesRepositoryConnectionNodesRepository struct {
	Id string `json:"id"`

	Name string `json:"name"`
}

func (v *GetRepositoriesOrganizationRepositoriesRepositoryConnectionNodesRepository) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetRepositoriesOrganizationRepositoriesRepositoryConnectionNodesRepository) __premarshalJSON() (*__premarshalGetRepositoriesOrganizationRepositoriesRepositoryConnectionNodesRepository, error) {
	var retval __premarshalGetRepositoriesOrganizationRepositoriesRepositoryConnectionNodesRepository

	retval.Id = v.RepositoryNode.Id
	retval.Name = v.RepositoryNode.Name
	return &retval, nil
}

// GetRepositoriesOrganizationRepositoriesRepositoryConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection.
type GetRepositoriesOrganizationRepositoriesRepositoryConnectionPageInfo struct {
	// When paginating forwards, the cursor to continue.
	EndCursor string `json:"endCursor"`
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
}

// GetEndCursor returns GetRepositoriesOrganizationRepositoriesRepositoryConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *GetRepositoriesOrganizationRepositoriesRepositoryConnectionPageInfo) GetEndCursor() string {
	return v.EndCursor
}

// GetHasNextPage returns GetRepositoriesOrganizationRepositoriesRepositoryConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *GetRepositoriesOrganizationRepositoriesRepositoryConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// GetRepositoriesResponse is returned by GetRepositories on success.
type GetRepositoriesResponse struct {
	// Lookup a organization by login.
	Organization GetRepositoriesOrganization `json:"organization"`
}

// GetOrganization returns GetRepositoriesResponse.Organization, and is useful for accessing the field via an interface.
func (v *GetRepositoriesResponse) GetOrganization() GetRepositoriesOrganization {
	return v.Organization
}

// History includes the GraphQL fields of GitObject requested by the fragment History.
// The GraphQL type's documentation follows.
//
// Represents a Git object.
//
// History is implemented by the following types:
// HistoryBlob
// HistoryCommit
// HistoryTag
// HistoryTree
type History interface {
	implementsGraphQLInterfaceHistory()
}

func (v *HistoryBlob) implementsGraphQLInterfaceHistory()   {}
func (v *HistoryCommit) implementsGraphQLInterfaceHistory() {}
func (v *HistoryTag) implementsGraphQLInterfaceHistory()    {}
func (v *HistoryTree) implementsGraphQLInterfaceHistory()   {}

func __unmarshalHistory(b []byte, v *History) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Blob":
		*v = new(HistoryBlob)
		return json.Unmarshal(b, *v)
	case "Commit":
		*v = new(HistoryCommit)
		return json.Unmarshal(b, *v)
	case "Tag":
		*v = new(HistoryTag)
		return json.Unmarshal(b, *v)
	case "Tree":
		*v = new(HistoryTree)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing GitObject.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for History: "%v"`, tn.TypeName)
	}
}

func __marshalHistory(v *History) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *HistoryBlob:
		typename = "Blob"

		result := struct {
			TypeName string `json:"__typename"`
			*HistoryBlob
		}{typename, v}
		return json.Marshal(result)
	case *HistoryCommit:
		typename = "Commit"

		result := struct {
			TypeName string `json:"__typename"`
			*HistoryCommit
		}{typename, v}
		return json.Marshal(result)
	case *HistoryTag:
		typename = "Tag"

		result := struct {
			TypeName string `json:"__typename"`
			*HistoryTag
		}{typename, v}
		return json.Marshal(result)
	case *HistoryTree:
		typename = "Tree"

		result := struct {
			TypeName string `json:"__typename"`
			*HistoryTree
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for History: "%T"`, v)
	}
}

// History includes the GraphQL fields of Blob requested by the fragment History.
// The GraphQL type's documentation follows.
//
// Represents a Git object.
type HistoryBlob struct {
}

// History includes the GraphQL fields of Commit requested by the fragment History.
// The GraphQL type's documentation follows.
//
// Represents a Git object.
type HistoryCommit struct {
	// The linear commit history starting from (and including) this commit, in the same order as `git log`.
	History HistoryHistoryCommitHistoryConnection `json:"history"`
}

// GetHistory returns HistoryCommit.History, and is useful for accessing the field via an interface.
func (v *HistoryCommit) GetHistory() HistoryHistoryCommitHistoryConnection { return v.History }

// HistoryHistoryCommitHistoryConnection includes the requested fields of the GraphQL type CommitHistoryConnection.
// The GraphQL type's documentation follows.
//
// The connection type for Commit.
type HistoryHistoryCommitHistoryConnection struct {
	// A list of nodes.
	Nodes []HistoryHistoryCommitHistoryConnectionNodesCommit `json:"nodes"`
	// Information to aid in pagination.
	PageInfo HistoryHistoryCommitHistoryConnectionPageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount"`
}

// GetNodes returns HistoryHistoryCommitHistoryConnection.Nodes, and is useful for accessing the field via an interface.
func (v *HistoryHistoryCommitHistoryConnection) GetNodes() []HistoryHistoryCommitHistoryConnectionNodesCommit {
	return v.Nodes
}

// GetPageInfo returns HistoryHistoryCommitHistoryConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *HistoryHistoryCommitHistoryConnection) GetPageInfo() HistoryHistoryCommitHistoryConnectionPageInfo {
	return v.PageInfo
}

// GetTotalCount returns HistoryHistoryCommitHistoryConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *HistoryHistoryCommitHistoryConnection) GetTotalCount() int { return v.TotalCount }

// HistoryHistoryCommitHistoryConnectionNodesCommit includes the requested fields of the GraphQL type Commit.
// The GraphQL type's documentation follows.
//
// Represents a Git commit.
type HistoryHistoryCommitHistoryConnectionNodesCommit struct {
	CommitNode `json:"-"`
}

// GetAuthor returns HistoryHistoryCommitHistoryConnectionNodesCommit.Author, and is useful for accessing the field via an interface.
func (v *HistoryHistoryCommitHistoryConnectionNodesCommit) GetAuthor() CommitNodeAuthorGitActor {
	return v.CommitNode.Author
}

// GetMessage returns HistoryHistoryCommitHistoryConnectionNodesCommit.Message, and is useful for accessing the field via an interface.
func (v *HistoryHistoryCommitHistoryConnectionNodesCommit) GetMessage() string {
	return v.CommitNode.Message
}

func (v *HistoryHistoryCommitHistoryConnectionNodesCommit) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*HistoryHistoryCommitHistoryConnectionNodesCommit
		graphql.NoUnmarshalJSON
	}
	firstPass.HistoryHistoryCommitHistoryConnectionNodesCommit = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.CommitNode)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalHistoryHistoryCommitHistoryConnectionNodesCommit struct {
	Author CommitNodeAuthorGitActor `json:"author"`

	Message string `json:"message"`
}

func (v *HistoryHistoryCommitHistoryConnectionNodesCommit) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *HistoryHistoryCommitHistoryConnectionNodesCommit) __premarshalJSON() (*__premarshalHistoryHistoryCommitHistoryConnectionNodesCommit, error) {
	var retval __premarshalHistoryHistoryCommitHistoryConnectionNodesCommit

	retval.Author = v.CommitNode.Author
	retval.Message = v.CommitNode.Message
	return &retval, nil
}

// HistoryHistoryCommitHistoryConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection.
type HistoryHistoryCommitHistoryConnectionPageInfo struct {
	// When paginating forwards, the cursor to continue.
	EndCursor string `json:"endCursor"`
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
}

// GetEndCursor returns HistoryHistoryCommitHistoryConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *HistoryHistoryCommitHistoryConnectionPageInfo) GetEndCursor() string { return v.EndCursor }

// GetHasNextPage returns HistoryHistoryCommitHistoryConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *HistoryHistoryCommitHistoryConnectionPageInfo) GetHasNextPage() bool { return v.HasNextPage }

// History includes the GraphQL fields of Tag requested by the fragment History.
// The GraphQL type's documentation follows.
//
// Represents a Git object.
type HistoryTag struct {
}

// History includes the GraphQL fields of Tree requested by the fragment History.
// The GraphQL type's documentation follows.
//
// Represents a Git object.
type HistoryTree struct {
}

// RepositoryNode includes the GraphQL fields of Repository requested by the fragment RepositoryNode.
// The GraphQL type's documentation follows.
//
// A repository contains the content for a project.
type RepositoryNode struct {
	Id string `json:"id"`
	// The name of the repository.
	Name string `json:"name"`
}

// GetId returns RepositoryNode.Id, and is useful for accessing the field via an interface.
func (v *RepositoryNode) GetId() string { return v.Id }

// GetName returns RepositoryNode.Name, and is useful for accessing the field via an interface.
func (v *RepositoryNode) GetName() string { return v.Name }

// __GetCommitsInPRInput is used internally by genqlient
type __GetCommitsInPRInput struct {
	Owner      string `json:"owner"`
	Repository string `json:"repository"`
	Number     int    `json:"number"`
	Cursor     string `json:"cursor,omitempty"`
}

// GetOwner returns __GetCommitsInPRInput.Owner, and is useful for accessing the field via an interface.
func (v *__GetCommitsInPRInput) GetOwner() string { return v.Owner }

// GetRepository returns __GetCommitsInPRInput.Repository, and is useful for accessing the field via an interface.
func (v *__GetCommitsInPRInput) GetRepository() string { return v.Repository }

// GetNumber returns __GetCommitsInPRInput.Number, and is useful for accessing the field via an interface.
func (v *__GetCommitsInPRInput) GetNumber() int { return v.Number }

// GetCursor returns __GetCommitsInPRInput.Cursor, and is useful for accessing the field via an interface.
func (v *__GetCommitsInPRInput) GetCursor() string { return v.Cursor }

// __GetCommitsOfBranchByAuthorInput is used internally by genqlient
type __GetCommitsOfBranchByAuthorInput struct {
	Owner      string   `json:"owner"`
	Repository string   `json:"repository"`
	Branch     string   `json:"branch"`
	Emails     []string `json:"emails"`
	Cursor     string   `json:"cursor,omitempty"`
}

// GetOwner returns __GetCommitsOfBranchByAuthorInput.Owner, and is useful for accessing the field via an interface.
func (v *__GetCommitsOfBranchByAuthorInput) GetOwner() string { return v.Owner }

// GetRepository returns __GetCommitsOfBranchByAuthorInput.Repository, and is useful for accessing the field via an interface.
func (v *__GetCommitsOfBranchByAuthorInput) GetRepository() string { return v.Repository }

// GetBranch returns __GetCommitsOfBranchByAuthorInput.Branch, and is useful for accessing the field via an interface.
func (v *__GetCommitsOfBranchByAuthorInput) GetBranch() string { return v.Branch }

// GetEmails returns __GetCommitsOfBranchByAuthorInput.Emails, and is useful for accessing the field via an interface.
func (v *__GetCommitsOfBranchByAuthorInput) GetEmails() []string { return v.Emails }

// GetCursor returns __GetCommitsOfBranchByAuthorInput.Cursor, and is useful for accessing the field via an interface.
func (v *__GetCommitsOfBranchByAuthorInput) GetCursor() string { return v.Cursor }

// __GetPRsInput is used internally by genqlient
type __GetPRsInput struct {
	Owner      string `json:"owner"`
	Repository string `json:"repository"`
	Cursor     string `json:"cursor,omitempty"`
}

// GetOwner returns __GetPRsInput.Owner, and is useful for accessing the field via an interface.
func (v *__GetPRsInput) GetOwner() string { return v.Owner }

// GetRepository returns __GetPRsInput.Repository, and is useful for accessing the field via an interface.
func (v *__GetPRsInput) GetRepository() string { return v.Repository }

// GetCursor returns __GetPRsInput.Cursor, and is useful for accessing the field via an interface.
func (v *__GetPRsInput) GetCursor() string { return v.Cursor }

// __GetRepositoriesInput is used internally by genqlient
type __GetRepositoriesInput struct {
	Login  string `json:"login"`
	Cursor string `json:"cursor,omitempty"`
}

// GetLogin returns __GetRepositoriesInput.Login, and is useful for accessing the field via an interface.
func (v *__GetRepositoriesInput) GetLogin() string { return v.Login }

// GetCursor returns __GetRepositoriesInput.Cursor, and is useful for accessing the field via an interface.
func (v *__GetRepositoriesInput) GetCursor() string { return v.Cursor }

func GetCommitsInPR(
	ctx context.Context,
	client graphql.Client,
	owner string,
	repository string,
	number int,
	cursor string,
) (*GetCommitsInPRResponse, error) {
	req := &graphql.Request{
		OpName: "GetCommitsInPR",
		Query: `
query GetCommitsInPR ($owner: String!, $repository: String!, $number: Int!, $cursor: String) {
	repository(owner: $owner, name: $repository) {
		pullRequest(number: $number) {
			commits(first: 100, after: $cursor) {
				nodes {
					commit {
						... CommitNode
					}
				}
				pageInfo {
					endCursor
					hasNextPage
				}
			}
		}
	}
}
fragment CommitNode on Commit {
	author {
		name
		email
	}
	message
}
`,
		Variables: &__GetCommitsInPRInput{
			Owner:      owner,
			Repository: repository,
			Number:     number,
			Cursor:     cursor,
		},
	}
	var err error

	var data GetCommitsInPRResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func GetCommitsOfBranchByAuthor(
	ctx context.Context,
	client graphql.Client,
	owner string,
	repository string,
	branch string,
	emails []string,
	cursor string,
) (*GetCommitsOfBranchByAuthorResponse, error) {
	req := &graphql.Request{
		OpName: "GetCommitsOfBranchByAuthor",
		Query: `
query GetCommitsOfBranchByAuthor ($owner: String!, $repository: String!, $branch: String!, $emails: [String!]!, $cursor: String) {
	repository(owner: $owner, name: $repository) {
		ref(qualifiedName: $branch) {
			target {
				__typename
				... History
			}
		}
	}
}
fragment History on GitObject {
	... on Commit {
		history(first: 100, after: $cursor, author: {emails:$emails}) {
			nodes {
				... CommitNode
			}
			pageInfo {
				endCursor
				hasNextPage
			}
			totalCount
		}
	}
}
fragment CommitNode on Commit {
	author {
		name
		email
	}
	message
}
`,
		Variables: &__GetCommitsOfBranchByAuthorInput{
			Owner:      owner,
			Repository: repository,
			Branch:     branch,
			Emails:     emails,
			Cursor:     cursor,
		},
	}
	var err error

	var data GetCommitsOfBranchByAuthorResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func GetPRs(
	ctx context.Context,
	client graphql.Client,
	owner string,
	repository string,
	cursor string,
) (*GetPRsResponse, error) {
	req := &graphql.Request{
		OpName: "GetPRs",
		Query: `
query GetPRs ($owner: String!, $repository: String!, $cursor: String) {
	repository(owner: $owner, name: $repository) {
		pullRequests(first: 100, after: $cursor) {
			nodes {
				number
			}
			pageInfo {
				endCursor
				hasNextPage
			}
		}
	}
}
`,
		Variables: &__GetPRsInput{
			Owner:      owner,
			Repository: repository,
			Cursor:     cursor,
		},
	}
	var err error

	var data GetPRsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func GetRepositories(
	ctx context.Context,
	client graphql.Client,
	login string,
	cursor string,
) (*GetRepositoriesResponse, error) {
	req := &graphql.Request{
		OpName: "GetRepositories",
		Query: `
query GetRepositories ($login: String!, $cursor: String) {
	organization(login: $login) {
		repositories(first: 100, after: $cursor) {
			nodes {
				... RepositoryNode
			}
			pageInfo {
				endCursor
				hasNextPage
			}
		}
	}
}
fragment RepositoryNode on Repository {
	id
	name
}
`,
		Variables: &__GetRepositoriesInput{
			Login:  login,
			Cursor: cursor,
		},
	}
	var err error

	var data GetRepositoriesResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
